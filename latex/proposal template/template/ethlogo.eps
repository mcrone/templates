%!PS-Adobe-3.0 EPSF-3.0
%%Title: (ethlogo.pdf)
%%Version: 1 2
%%Creator: Adobe Acrobat 6.0
%%CreationDate: 16:42:25 04/16/05
%%DocumentData: Clean7Bit
%%BoundingBox: 0 0 192 72
%%HiResBoundingBox: 0.0 0.0 192.0 72.0
%%Pages: 0
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%EndComments
%%BeginProlog
%%EndProlog
%%BeginSetup
%ADOPrintSettings: L1 W0 VM op crd os scsa T h ef bg ucr sf ef r b fa pr SEPS ttf hb Drucker-/PostScript-Farbmanagement 0
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.18 0
%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.
%%Version: 1.18 0
systemdict /languagelevel known dup
	{ currentglobal false setglobal }
	{ false }
ifelse
exch
userdict /Adobe_CoolType_Utility 2 copy known
	{ 2 copy get dup maxlength 25 add dict copy }
	{ 25 dict }
ifelse put
Adobe_CoolType_Utility
	begin
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch /eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{ globaldict begin currentglobal true setglobal }
if
	/ct_AddStdCIDMap
		ct_Level2?
			{ {
			((Hex) 57 StartData
			0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
			7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
			d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
			cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec
			} }
			{ {
			<BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
			4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> eexec
			} }
		ifelse bind def
userdict /cid_extensions known
	 {
	 cid_extensions
	 begin
	 /cid_GetCIDSystemInfo
		 {
		 1 index type /stringtype eq
			 { exch cvn exch }
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				 {
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					 {
					 1 index load
					 3 index get
					 dup null eq
						  { pop pop cid_UpdateDB }
						  {
						  exch
						  1 index /Created get eq
							  { exch pop exch pop }
							  { pop cid_UpdateDB }
						  ifelse
						  }
					 ifelse
					 }
					 { pop cid_UpdateDB }
				 ifelse
				 }
				 { cid_UpdateDB }
			 ifelse
			 end
		 } bind def
	 end
	 }
if
ct_Level2?
	{ end setglobal }
if
	/ct_UseNativeCapability?  systemdict /composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring () def
		/usewidths? true def
		end def
	ct_Level2? { setglobal } { pop } ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict /languagelevel known
				{ pop /CIDFont findresource /GlyphDirectory get }
				{
				1 index /CIDFont findresource /GlyphDirectory
				get dup type /dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			} def
		/+
			{
			systemdict /languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{ 1 dict begin }
			ifelse
			/$ exch def
			systemdict /languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			? { $ begin } if
			} def
		/? { $ type /dicttype eq } def
		/| {
			userdict /Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data /AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					  begin
						AddWidths?
								{
								Adobe_CoolType_Data /CC 3 index put
								? { def } { $ 3 1 roll put } ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont /Widths get exch CC exch put
								}
								{ ? { def } { $ 3 1 roll put } ifelse }
							ifelse
					end
				end
				}
				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse
				}
				{ ? { def } { $ 3 1 roll put } ifelse }
			ifelse
			} def
		/!
			{
			? { end } if
			systemdict /languagelevel known
				{ gvm setglobal }
			if
			end
			} def
		/: { string currentfile exch readstring pop } executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx [.001 0 0 .001 0 0] def
		/ct_1000Mtx [1000 0 0 1000 0 0] def
		/ct_raise {exch cvx exch errordict exch get exec stop} bind def
		/ct_reraise
			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print
					errordict exch get exec stop
			} bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			} bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility /ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{ dup string /dst_string exch def }
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex  get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string  dst_index 2 index putinterval
						length dst_index add /dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string  dst_index 2 index putinterval
						pop dup dst_index add /dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							  { arrayIndex get }
							  {
							  pop
							  exit
							  }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			} bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{ /unknowninstancename /Category resourcestatus }
			stopped
				{ cleartomark setglobal true }
				{ cleartomark currentglobal not exch setglobal }
			ifelse
				{
					{
					mark 3 1 roll /Category findresource
						begin
						ct_Vars /vm currentglobal put
						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
							{ cleartomark false }
							{ { 3 2 roll pop true } { cleartomark false } ifelse }
						ifelse
						ct_Vars /vm get setglobal
						end
					}
				}
				{ { resourcestatus } }
			ifelse bind def
			/CIDFont /Category ct_resourcestatus
				{ pop pop }
				{
				currentglobal  true setglobal
				/Generic /Category findresource
				dup length dict copy
				dup /InstanceType /dicttype put
				/CIDFont exch /Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit /ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				  /Registry (Adobe) def
				  /Ordering (Identity) def
				  /Supplement 0 def
				end def
				/CMapName /Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000> <FFFF>
				endcodespacerange
				1 begincidrange
				<0000> <FFFF> 0
				endcidrange
				endcmap
				CMapName currentdict /CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont  10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{ pop pop /defineresource /undefined ct_raise }
				ifelse
				} bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{ get 3 1 roll pop pop}
						{ pop pop /findresource /undefinedresource ct_raise }
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/ct_resourcestatus /resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup (Binary) eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{ cid_BYTE_COUNT () /SubFileDecode filter }
							stopped
								{ pop pop pop }
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup (Hex) eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{ null exch /ASCIIHexDecode filter /readstring }
							stopped
								{ pop exch pop (>) exch /readhexstring }
							if
							}
							{ (>) exch /readhexstring }
						ifelse
						load
						exit
						}
					if
					/StartData /typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch /GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop /readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				} bind def
			/StartData
				{
				mark
					{
					currentdict
					dup /FDArray get 0 get /FontMatrix get
					0 get 0.001 eq
						{
						dup /CDevProc known not
							{
							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known
								{ get }
								{
								pop pop
								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }
								}
							ifelse
							def
							}
						if
						}
						{
						 /CDevProc
							 {
							 pop pop pop pop pop
							 0
							 1 cid_temp /cid_CIDFONT get
							 /FDArray get 0 get
							 /FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							 } def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup /cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup /SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup /SubrMapOffset undef
										dup /SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{ pop }
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict /CIDFont defineresource pop
					end end
					}
				stopped
					{ cleartomark /StartData ct_reraise }
				if
				} bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit /ProcSet ct_resourcestatus
				{ true }
				{ /CIDInitC /ProcSet ct_resourcestatus }
			ifelse
				{
				pop pop
				/CIDInit /ProcSet findresource
				ct_UseNativeCapability?
					{ pop null }
					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }
				ifelse
				}
				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }
			ifelse
			ct_Vars exch /ct_oldCIDInit exch put
			} bind def
		/ct_restoreCIDInit
			{
			ct_Vars /ct_oldCIDInit get dup null ne
				{ /CIDInit exch /ProcSet defineresource pop }
				{ pop }
			ifelse
			} bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility /ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{ pop 0 }
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{ get }
								{ pop pop nullstring }
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{ 0 FDBytes ct_cvnsi }
									{ pop 0 }
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{ /charstring nullstring def exit }
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			} def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			} def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont /Widths get cid
					2 copy known
						{ get exch pop aload pop }
						{ pop pop stringwidth }
					ifelse
					}
					{ stringwidth }
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			} def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{ get }
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup /FontMatrix 2 copy known
						{ get }
						{ pop pop ct_defaultFontMtx }
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont /Widths get def
					/CharStrings 1 dict dup /.notdef
						<d841272cf18f54fc13> dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup /CharStrings get 1 index /Encoding get
			ct_dfCharCode get charstring put
			rootfont /WMode 2 copy known
				{ get }
				{ pop pop 0 }
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ ct_str1 show }
			ifelse
			} def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ ct_1000Mtx matrix concatmatrix concat }
				{ pop }
			ifelse
			/Private get
			Adobe_CoolType_Utility /ct_Level2? get not
				{
				ct_dfDict /Private
				3 -1 roll
					{ put }
				1183615869 internaldict /superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility /ct_Level2? get
				{ 1 index }
				{ 3 index /Private get mark 6 1 roll }
			ifelse
			dup /RunInt known
				{ /RunInt get }
				{ pop /CCRun }
			ifelse
			get exec
			Adobe_CoolType_Utility /ct_Level2? get not
				{ cleartomark }
			if
			} bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility /ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{ stop }
			if
			end
			end
			end
			end
			} bind def
		/BaseFontNameStr (BF00) def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/BuildChar /ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString /ct_Type3ShowCharString load def
				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup /lenIV 4 put def
				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def
				/PaintType 0 def
				/ct_ShowCharString /ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{ exit }
				if
				}
			for
			exch pop exch pop
			} bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch /WMode exch def
				exch /FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup /FontMatrix known
				{ dup /FontMatrix get /FontMatrix exch def }
				{ /FontMatrix matrix def }
			ifelse
				/bfCount 1 index /CIDCount get 256 idiv 1 add
					dup 256 gt { pop 256} if def
				/Encoding
					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for
					bfCount 1 255 { 2 copy bfCount put pop } for
					def
				/FDepVector bfCount dup 256 lt { 1 add } if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont /FontBBox known
						{ CIDFont /FontBBox get /FontBBox exch def }
					if
					CIDFont /CDevProc known
						{ CIDFont /CDevProc get /CDevProc exch def }
					if
					currentdict
					end
				BaseFontNameStr 3 (0) putinterval
				0 1 bfCount dup 256 eq { 1 sub } if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup /CIDFirstByte exch 256 mul def
						FontType 3 eq
							{ /ct_FDDict 2 dict def }
						if
						currentdict
						end
					1 index  16
					BaseFontNameStr  2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont /Widths get
						begin
						exch /CIDFont get /GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{ exch pop }
			ifelse
			} bind def
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{
				2 index /CMap ct_resourcestatus
					{ pop pop exch pop }
					{
					/CIDInit /ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch /WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry (Adobe) def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-) search
									{
									pop pop
									(-) search
										{
										dup length string copy
										exch pop exch pop
										}
										{ pop (Identity)}
									ifelse
									}
									{ pop  (Identity)  }
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000> <FFFF>
							endcodespacerange
							1 begincidrange
							<0000> <FFFF> 0
							endcidrange
							endcmap
							CMapName currentdict /CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index /CMap ct_resourcestatus
					{ pop pop }
					{
					/CIDInit /ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry (Adobe) def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-) search
							{
							pop pop
							(-) search
								{ dup length string copy exch pop exch pop }
								{ pop (Identity) }
							ifelse
							}
							{ pop (Identity) }
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000> <FFFF>
					endcodespacerange
					1 begincidrange
					<0000> <FFFF> 0
					endcidrange
					endcmap
					CMapName currentdict /CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		currentdict readonly pop
		end
	end
%%EndResource
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars 6.0 1
%%Copyright: Copyright 1987-2002 Adobe Systems Incorporated. All Rights Reserved.
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 162 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/undefineRes/findRes/setSA/pl
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil 6.0 1
%%Copyright: Copyright 1993-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: procset l2compat 6.0 1
%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Level 1 emulation of level 2 operators
/setcmykcolor isdefined? not
{
/setcmykcolor {
1 sub 4 1 roll
3 {
3 index add neg dup 0 lt { pop 0 } if
3 1 roll
} repeat
setrgbcolor
pop
} bd
} if
/rectclip isdefined? not
{
/rectclip { newpath re clip newpath } bd
} if
/rectfill isdefined? not
{
/rectfill { gsave newpath re fill grestore } bd
} if
/sethalftone isdefined? not
{
/sethalftone {
begin
HalftoneType 1 eq
{ Frequency Angle /SpotFunction load setscreen }
if
end
} bd
} if
Level1?
{
/pdf_show {show} bd
/xshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xshow
} bd
/yshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_yshow
} bd
/xyshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xyshow
} bd
} if
/getrampcolor {
cvi
/indx exch def
[
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
]
L1setcolor
} bd
/sssetbackground { L1setcolor } bd
%%EndResource
%%BeginResource: procset pdf 6.0 1
%%Copyright: Copyright 1998-2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/sg /setgray ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_image {{image} /DataSource pdf_dictOp} bd
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
end
} [/miDict /DataDict /_Filters] bld
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
c1x c2x eq
{
c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope c2y c1y sub c2x c1x sub div def
/theta slope 1 atan def
c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if
c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
c1x c1y translate
theta rotate
-90 rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
/max { 2 copy gt { pop } {exch pop} ifelse } bind def
/min { 2 copy lt { pop } {exch pop} ifelse } bind def
rampdict begin
40 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
c1x c1y translate
theta rotate
-90 rotate
/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
/c1y 0 def
/c1x 0 def
/c2x 0 def
ext0 {
0 getrampcolor
c2y r2 add r1 sub 0.0001 lt
{
c1x c1y r1 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2y r1 add r2 le
{
c1x c1y r1 0 360 arc
fill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r1 neg def
/p1y c1y def
/p2x r1 def
/p2y c1y def
p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
fill
}
{
/AA r2 r1 sub c2y div def
AA -1 eq
{ /theta 89.99 def}
{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
ifelse
/SS1 90 theta add dup sin exch cos div def
/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y p1x SS1 div neg def
/SS2 90 theta sub dup sin exch cos div def
/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y p2x SS2 div neg def
r1 r2 gt
{
/L1maxX p1x yMin p1y sub SS1 div add def
/L2maxX p2x yMin p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
ext1 {
c2y r2 add r1 lt
{
c2x c2y r2 0 360 arc
fill
}
{
c2y r1 add r2 sub 0.0001 le
{
c2x c2y r2 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r2 neg def
/p1y c2y def
/p2x r2 def
/p2y c2y def
p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
fill
}
{
/AA r2 r1 sub c2y div def
AA -1 eq
{ /theta 89.99 def}
{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
ifelse
/SS1 90 theta add dup sin exch cos div def
/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y c2y p1x SS1 div sub def
/SS2 90 theta sub dup sin exch cos div def
/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y c2y p2x SS2 div sub def
r1 r2 lt
{
/L1maxX p1x yMax p1y sub SS1 div add def
/L2maxX p2x yMax p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
grestore
grestore
end
end
end
} ifelse
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse
{
/PDFMark5 {cleartomark} bd
}
{
/PDFMark5 {pdfmark} bd
}ifelse
/ReadByPDFMark5
{
2 dict begin
/makerString exch def string /tmpString exch def
{
currentfile tmpString readline pop
makerString anchorsearch
{
pop pop cleartomark exit
}
{
3 copy /PUT PDFMark5 pop 2 copy (\n) /PUT PDFMark5
} ifelse
}loop
end
}bd
%%EndResource
%%BeginResource: procset sep_ops 6.0 1
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Support for Separations in Level 1, following the conventions of Tech Note 5044
userdict /sep_ops 50 dict dup begin put
/bdef {bind def} bind def
/xdef {exch def} bdef
/colorimagebuffer {
0 1 2 index length 1 sub {
dup 2 index exch get 255 exch sub 2 index 3 1 roll put
} for
} bdef
/addprocs {
[ 3 1 roll
/exec load
dup 3 1 roll
] cvx
} bdef
/L1? {
systemdict /languagelevel known {
systemdict /languagelevel get 2 lt
}{
true
} ifelse
} bdef
/colorexists {
statusdict /processcolors known {
statusdict /processcolors get exec
}{
/deviceinfo where {
pop deviceinfo /Colors known {
deviceinfo /Colors get
statusdict /processcolors {
deviceinfo /Colors known {
deviceinfo /Colors get
}{
1
} ifelse
} put
}{
1
} ifelse
}{
1
} ifelse
} ifelse
1 gt
} bdef
/colorplate colorexists { 0 } { 5 } ifelse def
/negativecolorplate false def
/setcmykcolor where {
pop
gsave
1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
4 {4 copy} repeat
grestore
1 dict begin
/foureq {
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
pop pop pop pop and and and
} def
1 0 0 0 foureq {/colorplate 1 store} if
0 1 0 0 foureq {/colorplate 2 store} if
0 0 1 0 foureq {/colorplate 3 store} if
0 0 0 1 foureq {/colorplate 4 store} if
0 0 0 0 foureq {/colorplate 6 store} if
end
} if
0 systemdict /currenttransfer get exec exec
1 systemdict /currenttransfer get exec exec
2 copy
eq
{
/colorplate 6 store
pop
/negativecolorplate exch 0.5 lt store
}
{
gt /negativecolorplate exch store
}
ifelse
/findcmykcustomcolor where { pop }
{
/findcmykcustomcolor {
[ 6 1 roll ] readonly
} bdef
} ifelse
/setoverprint where {
pop
}{
/setoverprint {
pop
} bdef
} ifelse
/currentoverprint where {
pop
}{
/currentoverprint {
false
} bdef
} ifelse
/setcustomcolor where {
pop
}{
L1? {
/setcustomcolor {
exch
aload pop pop
4 { 4 index mul 4 1 roll } repeat
5 -1 roll pop
setcmykcolor
} bdef
}{
/setcustomcolor {
exch
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace setcolor
} bdef
} ifelse
} ifelse
/ik 0 def
/iy 0 def
/im 0 def
/ic 0 def
/imagetint {
ic .3 mul
im .59 mul
iy .11 mul
ik add add add dup
1 gt {pop 1} if
} bdef
/setcmykcolor where {
pop
}{
/setcmykcolor {
/ik xdef /iy xdef /im xdef /ic xdef
imagetint
1 exch sub setgray
} bdef
} ifelse
/customcolorimage where {
pop
}{
L1? {
/customcolorimage{
gsave
colorexists {
aload pop pop
/ik xdef /iy xdef /im xdef /ic xdef
currentcolortransfer
{ik mul ik sub 1 add} addprocs
4 1 roll {iy mul iy sub 1 add} addprocs
4 1 roll {im mul im sub 1 add} addprocs
4 1 roll {ic mul ic sub 1 add} addprocs
4 1 roll setcolortransfer
/magentabuf 0 string def
/yellowbuf 0 string def
/blackbuf 0 string def
{
colorimagebuffer dup length magentabuf length ne
{
dup length dup dup
/magentabuf exch string def
/yellowbuf exch string def
/blackbuf exch string def
} if
dup magentabuf copy yellowbuf copy
blackbuf copy pop
} addprocs
{magentabuf}{yellowbuf}{blackbuf} true 4 colorimage
}{
aload pop pop /ik xdef /iy xdef /im xdef /ic xdef /tint
imagetint def
currenttransfer
{tint mul 1 tint sub add} addprocs settransfer image
} ifelse
grestore
} bdef
}{
/customcolorimage {
gsave
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace
10 dict begin
/ImageType 1 def
/DataSource exch def
/ImageMatrix exch def
/BitsPerComponent exch def
/Height exch def
/Width exch def
/Decode [1 0] def
currentdict end
image
grestore
} bdef
} ifelse
} ifelse
/setseparationgray where {
pop
}{
L1? {
/setseparationgray { 1 exch sub dup dup dup setcmykcolor } bdef
}{
/setseparationgray {
[/Separation /All /DeviceCMYK {dup dup dup}] setcolorspace
1 exch sub setcolor
} bdef
} ifelse
} ifelse
/separationimage where { pop }
{
/separationimage {
gsave
1 1 1 1 (All)
findcmykcustomcolor customcolorimage
grestore
} bdef
} ifelse
currentdict readonly pop end
%%EndResource
%%BeginResource: procset pdflev15044 6.0 1
%%Copyright: Copyright 1987-2002 Adobe Systems Incorporated. All Rights Reserved.
%%Title: PDF operators, Level 1, with emulated separations (TN 5044)
/_ColorSep5044? true dd
/docinitialize {
PDF begin
/_defaulthalftone
/currenthalftone where
{ pop currenthalftone }
{ 4 dict dup begin
currentscreen
/SpotFunction exch def
/Angle exch def
/Frequency exch def
/HalftoneType 1 def
end }
ifelse
dd
/currentcolortransfer where
{ pop /_defaultcolortransfer [ currentcolortransfer ] dd }
{ /_defaultcolortransfer [currenttransfer dup dup dup] dd }
ifelse
end
} bd
/initialize {
/overprintstack null dd
sep_ops begin
50 dict begin
_defaulthalftone sethalftone
} bd
/terminate {
end end
} bd
/currentcolortransfer where
{ pop }
{
/setcolortransfer
{
settransfer pop pop pop
} bd
} ifelse
/pl {
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bd
/m { _sa? { pl } if moveto } bd
/l { _sa? { pl } if lineto } bd
/c
{
_sa? {3 {pl 6 2 roll} repeat} if
curveto
} bd
/ri/pop ld
/setSA { /_sa? xdd } bd
/re
{
_sa?
{
8 dict begin
/:h exch def
/:w exch def
/:y exch def
/:x exch def
:x :y pl
/:ymin exch def /:xmin exch def
:x :w add :y :h add pl
/:ymax exch def /:xmax exch def
:xmin :ymin moveto
:xmax :ymin lineto
:xmax :ymax lineto
:xmin :ymax lineto
closepath
end
}
{
4 2 roll moveto
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
closepath
} ifelse
} bd
/q
{
gsave
[currentoverprint overprintstack] /overprintstack xdd
}
[/overprintstack] bld
/Q
{
overprintstack aload pop /overprintstack xdd setoverprint
grestore
}
[/overprintstack] bld
/AlmostFull?
{ dup maxlength exch length sub 2 le
} bd
/Expand
{ 1 index maxlength mul cvi dict
dup begin exch { def } forall end
} bd
/xput
{ 3 2 roll
dup 3 index known not
{ dup AlmostFull? { 1.5 Expand } if
} if
dup 4 2 roll put
} bd
/defineRes
{ _categories 1 index known not
{ /_categories _categories 2 index 10 dict xput store
} if
_categories exch 2 copy get 5 -1 roll 4 index xput put
} bd
/undefineRes {
null exch
defineRes
} bd
/findRes {
_categories exch get exch get
} bd
/L1setcolor {
aload length
dup 0 eq
{ pop .5 setgray }
{ dup 1 eq
{ pop setgray }
{ 3 eq
{ setrgbcolor }
{ setcmykcolor }
ifelse }
ifelse }
ifelse
} bind dd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
colorplate 0 eq
{
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} if
colorplate 1 ge colorplate 4 le and
{
4 colorplate sub index 4 { exch pop } repeat
concatandsettransfer
} if
colorplate 5 ge
{
0 index 4 { exch pop } repeat
concatandsettransfer
} if
} bd
/tn5044sethalftone
{
begin
HalftoneType 5 eq
{ [/Default /Cyan /Magenta /Yellow /Black /Default /Default /Default]
colorplate get
here not {
/Default here not { currentdict } if
} if
}
{ currentdict }
ifelse
end
begin
/TransferFunction here
{
concatandsettransfer
currentdict dup length dict
begin
{
1 index /TransferFunction ne { def } { pop pop } ifelse
} forall
currentdict
end
}
{
currentdict
} ifelse
end
sethalftone
} bd
/paintimage
{
colorplate 0 eq
{
{ {currentfile cyanstr readstring pop}
{currentfile magentastr readstring pop}
{currentfile yellowstr readstring pop}
{currentfile blackstr readstring pop
currentfile graystr readstring pop pop}
}
{ {currentfile cyanstr readhexstring pop}
{currentfile magentastr readhexstring pop}
{currentfile yellowstr readhexstring pop}
{currentfile blackstr readhexstring pop
currentfile graystr readhexstring pop pop}
} ifelse
true 4 colorimage
}
{
3 dict begin
/binaryOK exch def
[
1 1 5 {
dup
/currentfile cvx
[ /cyanstr /magentastr /yellowstr /blackstr /graystr ]
3 -1 roll 1 sub get cvx
binaryOK { /readstring } { /readhexstring } ifelse cvx
/pop cvx
5 -1 roll
colorplate dup 5 gt { pop 5 } if
eq not { /pop cvx } if
} for
] cvx bind
end
[
colorplate 6 eq {
/pop cvx
negativecolorplate { 0 } { 1 } ifelse
} if
colorplate 4 le
{
1 /exch cvx /sub cvx
} if
colorplate 6 ne
{
systemdict /currenttransfer get exec
aload pop
} if
] cvx
gsave
systemdict /settransfer get exec
systemdict /image get exec
grestore
} ifelse
} bd
%%EndResource
%%BeginResource: procset pdftext 6.0 1
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
Level2?
{
/pdfPatchCStrings
{
currentdict /CharStrings known currentdict /FontType known and
{
FontType 1 eq CharStrings type /dicttype eq and
{
CharStrings /mu known CharStrings /mu1 known not and CharStrings wcheck and
{
CharStrings /mu get
type /stringtype eq
{
currentglobal
CharStrings /mu1
CharStrings /mu get
dup gcheck setglobal
dup length string copy
put
setglobal
} if
} if
} if
} if
} bd
}
{ /pdfPatchCStrings {} bd }
ifelse
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
pdfPatchCStrings
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
pdfPatchCStrings
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq Encoding 160 get /.notdef eq and
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
%%BeginResource: procset pdfasc.prc 6.0 1
%%Copyright: Copyright 1992-2003 Adobe Systems Incorporated. All Rights Reserved.
/ASR {
13 dict begin
/mirV? exch def
/mirH? exch def
/center? exch def
/autorotate? exch def
/angle exch def
/shrink exch def
/Pury exch def
/Purx exch def
/Plly exch def
/Pllx exch def
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
Dury 0 eq Durx 0 eq and Dlly 0 eq Dllx 0 eq and and
{ shrink 0 gt { GClipBBox } { GPageBBox } ifelse }
{ ITransDBBox }
ifelse
/PHt Pury Plly sub def
/PW Purx Pllx sub def
/DHt Dury Dlly sub def
/DW Durx Dllx sub def
angle 90 eq angle 270 eq or
{
PHt /PHt PW def /PW exch def
} if
autorotate? PHt PW ne and DHt DW ne and
{
DHt DW ge
PHt PW ge
ne
{ /angle angle 90 add def
PHt /PHt PW def /PW exch def
}
if
} if
angle 0 ne
{
/angle angle 360 mod def
angle rotate
angle 90 eq
{ 0 DW neg translate }
if
angle 180 eq
{ DW neg DHt neg translate }
if
angle 270 eq
{ DHt neg 0 translate }
if
} if
center?
{
ITransBBox
Durx Dllx add 2 div Dury Dlly add 2 div
Purx Pllx add -2 div Pury Plly add -2 div
3 -1 roll add exch
3 -1 roll add exch
translate
}
{
ITransBBox
angle 0 eq
{Dllx Pllx sub Dury Pury sub}
if
angle 90 eq
{Durx Purx sub Dury Pury sub}
if
angle 180 eq
{Durx Purx sub Dlly Plly sub}
if
angle 270 eq
{Dllx Pllx sub Dlly Plly sub}
if
translate
}
ifelse
mirH? mirV? or
{
ITransBBox
mirH?
{
-1 1 scale
Durx Dllx add neg 0 translate
} if
mirV?
{
1 -1 scale
0 Dury Dlly add neg translate
} if
} if
shrink 0 ne
{
ITransBBox
Dury Dlly sub Pury Plly sub div
Durx Dllx sub Purx Pllx sub div
2 copy gt { exch } if pop
shrink 1 eq
{
Durx Dllx add 2 div Dury Dlly add 2 div translate
dup scale
Purx Pllx add -2 div Pury Plly add -2 div translate
}
{
shrink 2 eq 1 index 1.0 lt and
{
Durx Dllx add 2 div Dury Dlly add 2 div translate
dup scale
Purx Pllx add -2 div Pury Plly add -2 div translate
}
{ pop }
ifelse
}
ifelse
} if
end
} [/autorotate? /shrink? /mirH? /mirV? /angle /Pury /Purx /Plly /Pllx /Durx /Dury /Dllx /Dlly /PW /PHt /DW /DHt
/Devurx /Devury /Devllx /Devlly /pdfHt /pdfW]
bld
/GClipBBox
{
gsave newpath clippath pathbbox newpath grestore
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
ITransDBBox
} [/Durx /Dury /Dllx /Dlly]
bld
/GPageBBox
{
{
currentpagedevice /PageSize get aload pop
/Devury exch def /Devurx exch def
/Devllx 0 def /Devlly 0 def
ITransBBox
}
stopped
{ GClipBBox }
if
} [/Devurx /Devury /Devllx /Devlly ]
bld
/ITransDBBox
{
Durx Dury transform matrix defaultmatrix itransform
/Devury exch def
/Devurx exch def
Dllx Dlly transform matrix defaultmatrix itransform
/Devlly exch def
/Devllx exch def
Devury Devlly lt {/Devlly Devury /Devury Devlly def def} if
Devurx Devllx lt {/Devllx Devurx /Devurx Devllx def def} if
} [/Durx /Dury /Dllx /Dlly /Devurx /Devury /Devllx /Devlly ]
bld
/ITransBBox
{
/um matrix currentmatrix matrix defaultmatrix matrix invertmatrix matrix concatmatrix def
Devllx Devlly um itransform
Devurx Devury um itransform
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
Dury Dlly lt {/Dlly Dury /Dury Dlly def def} if
Durx Dllx lt {/Dllx Durx /Durx Dllx def def} if
} [ /um /Durx /Dury /Dllx /Dlly /Devurx /Devury /Devllx /Devlly ]
bld
%%EndResource
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec

[/NamespacePush PDFMark5
[/_objdef {Metadata_In_EPS} /type /stream /OBJ PDFMark5
[{Metadata_In_EPS} 973 (% &end XMP packet& %) ReadByPDFMark5
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<?adobe-xap-filters esc="CRLF"?>
<x:xmpmeta xmlns:x='adobe:ns:meta/' x:xmptk='XMP toolkit 2.9.1-13, framework 1.6'>
<rdf:RDF xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' xmlns:iX='http://ns.adobe.com/iX/1.0/'>
<rdf:Description rdf:about='uuid:dcc94287-8125-48ce-8489-8fcfbd614a24' xmlns:pdf='http://ns.adobe.com/pdf/1.3/' pdf:Producer='Acrobat Distiller 4.05 for Sparc Solaris'></rdf:Description>
<rdf:Description rdf:about='uuid:dcc94287-8125-48ce-8489-8fcfbd614a24' xmlns:xap='http://ns.adobe.com/xap/1.0/' xap:ModifyDate='2005-01-17T10:51:59Z' xap:CreateDate='2005-01-17T10:51:57Z'></rdf:Description>
<rdf:Description rdf:about='uuid:dcc94287-8125-48ce-8489-8fcfbd614a24' xmlns:xapMM='http://ns.adobe.com/xap/1.0/mm/' xapMM:DocumentID='uuid:07766897-55f9-4dec-ae6c-9e4601cb3d14'/>
<rdf:Description rdf:about='uuid:dcc94287-8125-48ce-8489-8fcfbd614a24' xmlns:dc='http://purl.org/dc/elements/1.1/' dc:format='application/pdf'/>
</rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Metadata_In_EPS} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT PDFMark5
[/Document 1 dict begin /Metadata {Metadata_In_EPS} def currentdict end /BDC PDFMark5
[/NamespacePop PDFMark5

PDFVars/TermAll get exec end end

%%EndSetup
PDFVars begin PDF begin PDFVars/InitAll get exec
0 0 192 72 rectclip
0.0 0.0 192.0 72.0 re
W
n
2.0 setflat
n
49.496002 61.493004 m
48.161003 55.369003 l
52.125004 55.369003 l
53.602001 61.493004 l
59.443005 61.493004 l
55.665001 44.528004 l
49.774002 44.532001 l
51.137001 51.047001 l
47.282001 51.047001 l
45.708004 44.532001 l
39.638 44.536003 l
42.441002 57.091003 l
37.191002 57.095001 l
34.391003 44.528004 l
28.149002 44.532001 l
30.943001 57.095001 l
17.262001 57.095001 l
16.806002 55.065002 l
25.239 55.065002 l
24.352001 51.068001 l
15.846001 51.068001 l
15.358001 48.939999 l
24.183001 48.939999 l
23.198002 44.532001 l
8.119 44.532001 l
11.898001 61.493004 l
49.496002 61.493004 l
f
n
8.234 30.355001 m
8.234 36.087002 l
11.256001 36.087002 l
11.256001 35.309002 l
9.156 35.309002 l
9.156 33.682003 l
11.154 33.682003 l
11.154 32.932003 l
9.156 32.932003 l
9.156 31.149002 l
11.256001 31.149002 l
11.256001 30.355001 l
8.234 30.355001 l
0.0 0.0 0.0 setrgbcolor
f
n
13.773001 35.784 m
13.773001 36.107002 13.509999 36.354 13.197001 36.354 c
12.875001 36.354 12.612 36.099003 12.612 35.784 c
12.612 35.469002 12.875001 35.214001 13.197001 35.214001 c
13.509999 35.214001 13.773001 35.469002 13.773001 35.784 c
h
12.739 30.355001 0.906 4.228998 re
f
n
17.748001 32.540001 m
17.748001 31.813002 17.373001 31.009001 16.700001 31.009001 c
16.119999 31.009001 15.856001 31.488001 15.856001 32.343002 c
15.856001 33.489002 16.35 33.934002 17.075001 33.934002 c
17.296001 33.934002 17.518002 33.908001 17.748001 33.857002 c
17.748001 32.540001 l
h
18.651001 30.346001 m
18.651001 36.557003 l
17.748001 36.557003 l
17.748001 34.616001 l
17.518002 34.633003 17.313002 34.649002 17.109001 34.649002 c
15.738001 34.649002 14.903001 33.719997 14.903001 32.258003 c
14.903001 31.026001 15.417001 30.261002 16.453001 30.261002 c
17.109001 30.261002 17.603001 30.618002 17.834002 31.138002 c
17.85 31.138002 l
17.808001 30.899002 17.789999 30.567001 17.789999 30.346001 c
18.651001 30.346001 l
f
n
22.800001 33.092003 m
22.800001 32.542 22.427002 32.228001 21.859001 32.228001 c
21.248001 32.228001 20.909 32.549999 20.909 33.101002 c
20.909 33.618 21.265001 33.983002 21.867001 33.983002 c
22.452002 33.983002 22.800001 33.652 22.800001 33.092003 c
h
23.972002 29.789999 m
23.972002 30.58 23.454 31.01 22.537001 31.01 c
21.816002 31.01 l
21.308001 31.01 21.121 31.097002 21.121 31.313002 c
21.121 31.434002 21.197001 31.564001 21.367001 31.632002 c
21.494001 31.607002 21.689001 31.59 21.85 31.59 c
23.038002 31.59 23.675001 32.236 23.675001 33.152 c
23.675001 33.457001 23.564001 33.711002 23.386002 33.855003 c
24.032001 33.855003 l
24.032001 34.571003 l
22.605001 34.571003 l
22.376001 34.623001 22.164001 34.657001 21.91 34.657001 c
20.706001 34.657001 20.028002 33.907001 20.028002 33.016003 c
20.028002 32.491001 20.24 32.058002 20.655001 31.828001 c
20.358002 31.701002 20.172001 31.408001 20.172001 31.097002 c
20.172001 30.816002 20.333 30.597002 20.587002 30.469999 c
20.223001 30.285002 19.909 29.884001 19.909 29.407001 c
19.909 28.59 20.596001 28.167002 21.698002 28.167002 c
23.055 28.167002 23.972002 28.887001 23.972002 29.789999 c
h
23.072001 29.671001 m
23.072001 29.211 22.629999 28.869999 21.842001 28.869999 c
21.231001 28.869999 20.808001 29.125002 20.808001 29.577002 c
20.808001 29.867001 20.986 30.123001 21.274 30.285002 c
21.342001 30.276001 21.426001 30.276001 21.503 30.276001 c
22.291 30.276001 l
22.825001 30.276001 23.072001 30.038002 23.072001 29.671001 c
f
n
27.606001 33.056 m
25.825001 33.056 l
25.901001 33.623001 26.255001 33.995003 26.762001 33.995003 c
27.294001 33.995003 27.623001 33.631001 27.606001 33.056 c
h
28.513 32.843002 m
28.513 33.843002 27.996002 34.667 26.796001 34.667 c
25.57 34.667 24.873001 33.716003 24.873001 32.444 c
24.873001 30.936001 25.596001 30.262001 26.906002 30.262001 c
27.42 30.262001 27.937002 30.354002 28.359999 30.531002 c
28.275002 31.254002 l
27.928001 31.081001 27.479002 30.978001 27.049002 30.978001 c
26.213001 30.978001 25.783001 31.426001 25.808001 32.418003 c
28.487001 32.418003 l
28.504002 32.579998 28.513 32.724003 28.513 32.843002 c
f
n
32.458 30.355001 m
32.458 33.082001 l
32.458 33.610001 32.314003 33.917 31.833002 33.917 c
31.201002 33.917 30.737001 33.243 30.737001 32.400002 c
30.737001 30.355001 l
29.831001 30.355001 l
29.831001 34.583 l
30.695002 34.583 l
30.695002 34.363003 30.678001 34.001003 30.636002 33.763 c
30.644001 33.755001 l
30.889002 34.296001 31.395002 34.667 32.103001 34.667 c
33.063 34.667 33.361 34.068001 33.361 33.32 c
33.361 30.355001 l
32.458 30.355001 l
f
n
36.331001 35.889999 m
36.331001 36.169998 36.102001 36.400002 35.813004 36.400002 c
35.524002 36.400002 35.303001 36.169998 35.303001 35.889999 c
35.303001 35.601002 35.524002 35.371002 35.813004 35.371002 c
36.102001 35.371002 36.331001 35.601002 36.331001 35.889999 c
h
37.988003 35.889999 m
37.988003 36.169998 37.758003 36.400002 37.477001 36.400002 c
37.188004 36.400002 36.959003 36.169998 36.959003 35.889999 c
36.959003 35.601002 37.188004 35.371002 37.477001 35.371002 c
37.758003 35.371002 37.988003 35.601002 37.988003 35.889999 c
h
38.644001 32.552002 m
38.644001 34.049999 37.845001 34.667 36.715 34.667 c
35.434002 34.667 34.614002 33.702003 34.614002 32.415001 c
34.614002 30.914001 35.375 30.26 36.545002 30.26 c
37.794003 30.26 38.644001 31.239002 38.644001 32.552002 c
h
37.709003 32.492001 m
37.709003 31.505001 37.216003 31.042002 36.630001 31.042002 c
35.925003 31.042002 35.552002 31.548002 35.552002 32.509003 c
35.552002 33.487003 36.087002 33.917 36.639 33.917 c
37.361 33.917 37.709003 33.402 37.709003 32.492001 c
f
n
40.601002 30.262001 m
40.287003 30.262001 39.972 30.295002 39.708 30.346001 c
39.734001 31.114002 l
39.998001 31.038002 40.329002 30.978001 40.653004 30.978001 c
41.148003 30.978001 41.491001 31.191002 41.491001 31.541002 c
41.491001 32.395 39.632004 31.882002 39.632004 33.351002 c
39.632004 34.085003 40.227001 34.665001 41.379002 34.665001 c
41.626003 34.665001 41.915001 34.631001 42.171001 34.588001 c
42.145 33.845001 l
41.889999 33.922001 41.593002 33.965 41.32 33.965 c
40.815002 33.965 40.567001 33.759998 40.567001 33.436001 c
40.567001 32.616001 42.443001 33.035 42.443001 31.627001 c
42.443001 30.835001 41.737003 30.262001 40.601002 30.262001 c
f
n
44.452003 30.262001 m
44.137001 30.262001 43.822002 30.295002 43.559002 30.346001 c
43.584003 31.114002 l
43.848003 31.038002 44.179001 30.978001 44.503002 30.978001 c
44.999001 30.978001 45.341003 31.191002 45.341003 31.541002 c
45.341003 32.395 43.482002 31.882002 43.482002 33.351002 c
43.482002 34.085003 44.078003 34.665001 45.23 34.665001 c
45.477001 34.665001 45.766003 34.631001 46.021004 34.588001 c
45.996002 33.845001 l
45.741001 33.922001 45.443001 33.965 45.169998 33.965 c
44.666 33.965 44.417004 33.759998 44.417004 33.436001 c
44.417004 32.616001 46.293003 33.035 46.293003 31.627001 c
46.293003 30.835001 45.587002 30.262001 44.452003 30.262001 c
f
n
48.07 35.214001 m
47.749001 35.214001 47.485001 35.469002 47.485001 35.784 c
47.485001 36.099003 47.749001 36.354 48.07 36.354 c
48.384003 36.354 48.646004 36.107002 48.646004 35.784 c
48.646004 35.469002 48.384003 35.214001 48.07 35.214001 c
h
47.613003 34.584003 0.905998 -4.229 re
f
n
50.809998 30.262001 m
50.495003 30.262001 50.18 30.295002 49.917004 30.346001 c
49.942001 31.114002 l
50.206001 31.038002 50.537003 30.978001 50.861004 30.978001 c
51.357002 30.978001 51.699001 31.191002 51.699001 31.541002 c
51.699001 32.395 49.84 31.882002 49.84 33.351002 c
49.84 34.085003 50.435001 34.665001 51.588001 34.665001 c
51.835003 34.665001 52.124004 34.631001 52.379002 34.588001 c
52.354004 33.845001 l
52.099003 33.922001 51.801003 33.965 51.528004 33.965 c
51.023003 33.965 50.775002 33.759998 50.775002 33.436001 c
50.775002 32.616001 52.651001 33.035 52.651001 31.627001 c
52.651001 30.835001 51.945004 30.262001 50.809998 30.262001 c
f
n
55.506004 30.276001 m
54.418003 30.276001 53.627003 30.811001 53.627003 32.325001 c
53.627003 33.678001 54.316002 34.651001 55.77 34.651001 c
56.084003 34.651001 56.407001 34.609001 56.688004 34.524002 c
56.594002 33.738003 l
56.339005 33.833 56.049999 33.901001 55.744003 33.901001 c
54.969997 33.901001 54.579998 33.327003 54.579998 32.428001 c
54.579998 31.648001 54.860001 31.057001 55.701004 31.057001 c
56.024002 31.057001 56.373001 31.134001 56.619999 31.263002 c
56.696003 30.488001 l
56.416004 30.378002 55.974003 30.276001 55.506004 30.276001 c
f
n
60.533005 30.355001 m
60.533005 33.082001 l
60.533005 33.610001 60.389004 33.917 59.909004 33.917 c
59.276001 33.917 58.812004 33.243 58.812004 32.391003 c
58.812004 30.355001 l
57.906002 30.355001 l
57.906002 36.557003 l
58.812004 36.557003 l
58.812004 34.649998 l
58.812004 34.389 58.795002 34.035 58.736004 33.806 c
58.753002 33.797001 l
58.998001 34.321003 59.496002 34.667 60.178001 34.667 c
61.138004 34.667 61.436005 34.068001 61.436005 33.32 c
61.436005 30.355001 l
60.533005 30.355001 l
f
n
65.439003 33.056 m
63.658005 33.056 l
63.734001 33.623001 64.088005 33.995003 64.595001 33.995003 c
65.127007 33.995003 65.456001 33.631001 65.439003 33.056 c
h
66.345001 32.843002 m
66.345001 33.843002 65.829002 34.667 64.629005 34.667 c
63.403004 34.667 62.706001 33.716003 62.706001 32.444 c
62.706001 30.936001 63.429005 30.262001 64.738007 30.262001 c
65.253006 30.262001 65.769997 30.354002 66.193001 30.531002 c
66.108002 31.254002 l
65.761002 31.081001 65.312004 30.978001 64.882004 30.978001 c
64.046005 30.978001 63.616001 31.426001 63.641003 32.418003 c
66.32 32.418003 l
66.337006 32.579998 66.345001 32.724003 66.345001 32.843002 c
f
n
71.449997 35.307003 m
71.449997 30.355001 l
70.529007 30.355001 l
70.529007 35.307003 l
68.956001 35.307003 l
68.956001 36.088001 l
73.032005 36.088001 l
73.032005 35.307003 l
71.449997 35.307003 l
f
n
75.781006 33.056 m
73.999001 33.056 l
74.075005 33.623001 74.43 33.995003 74.937004 33.995003 c
75.468002 33.995003 75.797005 33.631001 75.781006 33.056 c
h
76.687004 32.843002 m
76.687004 33.843002 76.169998 34.667 74.970001 34.667 c
73.745003 34.667 73.047005 33.716003 73.047005 32.444 c
73.047005 30.936001 73.769997 30.262001 75.080002 30.262001 c
75.595001 30.262001 76.111 30.354002 76.535004 30.531002 c
76.449997 31.254002 l
76.103004 31.081001 75.654007 30.978001 75.224007 30.978001 c
74.388 30.978001 73.957001 31.426001 73.982002 32.418003 c
76.662003 32.418003 l
76.678001 32.579998 76.687004 32.724003 76.687004 32.843002 c
f
n
79.541 30.276001 m
78.453003 30.276001 77.662003 30.811001 77.662003 32.325001 c
77.662003 33.678001 78.351006 34.651001 79.804001 34.651001 c
80.119003 34.651001 80.442001 34.609001 80.722 34.524002 c
80.629005 33.738003 l
80.374001 33.833 80.085007 33.901001 79.779007 33.901001 c
79.005005 33.901001 78.614006 33.327003 78.614006 32.428001 c
78.614006 31.648001 78.895004 31.057001 79.736 31.057001 c
80.059006 31.057001 80.408005 31.134001 80.654007 31.263002 c
80.731003 30.488001 l
80.449997 30.378002 80.008003 30.276001 79.541 30.276001 c
f
n
84.567001 30.355001 m
84.567001 33.082001 l
84.567001 33.610001 84.424004 33.917 83.943001 33.917 c
83.311005 33.917 82.847 33.243 82.847 32.391003 c
82.847 30.355001 l
81.941002 30.355001 l
81.941002 36.557003 l
82.847 36.557003 l
82.847 34.649998 l
82.847 34.389 82.830002 34.035 82.771004 33.806 c
82.788002 33.797001 l
83.033005 34.321003 83.529999 34.667 84.213005 34.667 c
85.172005 34.667 85.471001 34.068001 85.471001 33.32 c
85.471001 30.355001 l
84.567001 30.355001 l
f
n
89.709999 30.355001 m
89.709999 33.082001 l
89.709999 33.610001 89.566002 33.917 89.086006 33.917 c
88.454002 33.917 87.989998 33.243 87.989998 32.400002 c
87.989998 30.355001 l
87.084007 30.355001 l
87.084007 34.583 l
87.947006 34.583 l
87.947006 34.363003 87.93 34.001003 87.888 33.763 c
87.896004 33.755001 l
88.142006 34.296001 88.647003 34.667 89.355003 34.667 c
90.315002 34.667 90.613007 34.068001 90.613007 33.32 c
90.613007 30.355001 l
89.709999 30.355001 l
f
n
93.259995 35.784 m
93.259995 36.107002 92.997002 36.354 92.683006 36.354 c
92.361008 36.354 92.099007 36.099003 92.099007 35.784 c
92.099007 35.469002 92.361008 35.214001 92.683006 35.214001 c
92.997002 35.214001 93.259995 35.469002 93.259995 35.784 c
h
92.226006 30.355001 0.905998 4.228998 re
f
n
95.422005 30.262001 m
95.108002 30.262001 94.793007 30.295002 94.529999 30.346001 c
94.555008 31.114002 l
94.819008 31.038002 95.150002 30.978001 95.474007 30.978001 c
95.970001 30.978001 96.312004 31.191002 96.312004 31.541002 c
96.312004 32.395 94.453003 31.882002 94.453003 33.351002 c
94.453003 34.085003 95.048004 34.665001 96.201004 34.665001 c
96.448006 34.665001 96.737007 34.631001 96.992004 34.588001 c
96.966003 33.845001 l
96.711006 33.922001 96.414001 33.965 96.141006 33.965 c
95.636002 33.965 95.388008 33.759998 95.388008 33.436001 c
95.388008 32.616001 97.264008 33.035 97.264008 31.627001 c
97.264008 30.835001 96.559006 30.262001 95.422005 30.262001 c
f
n
100.119003 30.276001 m
99.031006 30.276001 98.241005 30.811001 98.241005 32.325001 c
98.241005 33.678001 98.929008 34.651001 100.382004 34.651001 c
100.697006 34.651001 101.019997 34.609001 101.300003 34.524002 c
101.207008 33.738003 l
100.952003 33.833 100.663002 33.901001 100.357002 33.901001 c
99.584007 33.901001 99.192001 33.327003 99.192001 32.428001 c
99.192001 31.648001 99.473007 31.057001 100.314003 31.057001 c
100.638008 31.057001 100.986008 31.134001 101.232002 31.263002 c
101.309006 30.488001 l
101.028008 30.378002 100.586006 30.276001 100.119003 30.276001 c
f
n
105.145004 30.355001 m
105.145004 33.082001 l
105.145004 33.610001 105.002007 33.917 104.521004 33.917 c
103.889008 33.917 103.425003 33.243 103.425003 32.391003 c
103.425003 30.355001 l
102.519005 30.355001 l
102.519005 36.557003 l
103.425003 36.557003 l
103.425003 34.649998 l
103.425003 34.389 103.408005 34.035 103.349007 33.806 c
103.366005 33.797001 l
103.611008 34.321003 104.108002 34.667 104.791008 34.667 c
105.751007 34.667 106.049004 34.068001 106.049004 33.32 c
106.049004 30.355001 l
105.145004 30.355001 l
f
n
110.052002 33.056 m
108.271004 33.056 l
108.347008 33.623001 108.702003 33.995003 109.208008 33.995003 c
109.739998 33.995003 110.069008 33.631001 110.052002 33.056 c
h
110.959007 32.843002 m
110.959007 33.843002 110.442009 34.667 109.242004 34.667 c
108.016006 34.667 107.319008 33.716003 107.319008 32.444 c
107.319008 30.936001 108.041008 30.262001 109.352005 30.262001 c
109.867004 30.262001 110.382004 30.354002 110.806007 30.531002 c
110.721008 31.254002 l
110.374008 31.081001 109.926003 30.978001 109.495003 30.978001 c
108.659004 30.978001 108.229004 31.426001 108.254005 32.418003 c
110.933006 32.418003 l
110.949997 32.579998 110.959007 32.724003 110.959007 32.843002 c
f
n
118.043007 30.355001 m
118.043007 32.934002 l
115.324005 32.934002 l
115.324005 30.355001 l
114.402008 30.355001 l
114.402008 36.087002 l
115.324005 36.087002 l
115.324005 33.728001 l
118.043007 33.728001 l
118.043007 36.087002 l
118.949005 36.087002 l
118.949005 30.355001 l
118.043007 30.355001 l
f
n
123.300003 32.492001 m
123.300003 31.505001 122.807007 31.042002 122.221008 31.042002 c
121.516006 31.042002 121.143005 31.548002 121.143005 32.509003 c
121.143005 33.487003 121.678009 33.917 122.229004 33.917 c
122.952003 33.917 123.300003 33.402 123.300003 32.492001 c
h
124.235008 32.552002 m
124.235008 34.049999 123.436005 34.667 122.306007 34.667 c
121.024002 34.667 120.205009 33.702003 120.205009 32.415001 c
120.205009 30.914001 120.965004 30.26 122.136009 30.26 c
123.385002 30.26 124.235008 31.239002 124.235008 32.552002 c
f
n
127.03801 30.276001 m
125.949997 30.276001 125.159996 30.811001 125.159996 32.325001 c
125.159996 33.678001 125.848007 34.651001 127.30201 34.651001 c
127.616005 34.651001 127.939003 34.609001 128.220001 34.524002 c
128.126007 33.738003 l
127.87101 33.833 127.582008 33.901001 127.276009 33.901001 c
126.502007 33.901001 126.112007 33.327003 126.112007 32.428001 c
126.112007 31.648001 126.392006 31.057001 127.233009 31.057001 c
127.557007 31.057001 127.905006 31.134001 128.151001 31.263002 c
128.228012 30.488001 l
127.948006 30.378002 127.505005 30.276001 127.03801 30.276001 c
f
n
132.064011 30.355001 m
132.064011 33.082001 l
132.064011 33.610001 131.921005 33.917 131.44101 33.917 c
130.807999 33.917 130.345001 33.243 130.345001 32.391003 c
130.345001 30.355001 l
129.438004 30.355001 l
129.438004 36.557003 l
130.345001 36.557003 l
130.345001 34.649998 l
130.345001 34.389 130.328003 34.035 130.268005 33.806 c
130.285004 33.797001 l
130.529999 34.321003 131.027008 34.667 131.709991 34.667 c
132.669998 34.667 132.968002 34.068001 132.968002 33.32 c
132.968002 30.355001 l
132.064011 30.355001 l
f
n
135.270004 30.262001 m
134.955002 30.262001 134.641006 30.295002 134.376999 30.346001 c
134.403 31.114002 l
134.666 31.038002 134.998001 30.978001 135.320999 30.978001 c
135.817001 30.978001 136.159012 31.191002 136.159012 31.541002 c
136.159012 32.395 134.30101 31.882002 134.30101 33.351002 c
134.30101 34.085003 134.895004 34.665001 136.048004 34.665001 c
136.295013 34.665001 136.585007 34.631001 136.839005 34.588001 c
136.814011 33.845001 l
136.559006 33.922001 136.261002 33.965 135.988007 33.965 c
135.484009 33.965 135.236008 33.759998 135.236008 33.436001 c
135.236008 32.616001 137.111008 33.035 137.111008 31.627001 c
137.111008 30.835001 136.406006 30.262001 135.270004 30.262001 c
f
n
139.966003 30.276001 m
138.878006 30.276001 138.088013 30.811001 138.088013 32.325001 c
138.088013 33.678001 138.776001 34.651001 140.229996 34.651001 c
140.544006 34.651001 140.867004 34.609001 141.14801 34.524002 c
141.055008 33.738003 l
140.799011 33.833 140.509995 33.901001 140.205002 33.901001 c
139.431 33.901001 139.039993 33.327003 139.039993 32.428001 c
139.039993 31.648001 139.319992 31.057001 140.162003 31.057001 c
140.485001 31.057001 140.833008 31.134001 141.080002 31.263002 c
141.156006 30.488001 l
140.876007 30.378002 140.434006 30.276001 139.966003 30.276001 c
f
n
144.993011 30.355001 m
144.993011 33.082001 l
144.993011 33.610001 144.849991 33.917 144.369003 33.917 c
143.737 33.917 143.27301 33.243 143.27301 32.391003 c
143.27301 30.355001 l
142.367004 30.355001 l
142.367004 36.557003 l
143.27301 36.557003 l
143.27301 34.649998 l
143.27301 34.389 143.256012 34.035 143.197006 33.806 c
143.213013 33.797001 l
143.458008 34.321003 143.956009 34.667 144.639008 34.667 c
145.598007 34.667 145.896011 34.068001 145.896011 33.32 c
145.896011 30.355001 l
144.993011 30.355001 l
f
n
150.17601 30.345001 m
150.17601 30.564001 150.193008 30.926001 150.236008 31.164001 c
150.227005 31.172001 l
149.981003 30.631001 149.470001 30.26 148.755005 30.26 c
147.793015 30.26 147.49501 30.859001 147.49501 31.607002 c
147.49501 34.572002 l
148.39801 34.572002 l
148.39801 31.846001 l
148.39801 31.317001 148.543015 31.01 149.028 31.01 c
149.666 31.01 150.134003 31.684002 150.134003 32.527 c
150.134003 34.572002 l
151.039993 34.572002 l
151.039993 30.345001 l
150.17601 30.345001 l
f
n
153.104004 30.355011 m
153.104004 36.557007 l
0.906006 w
S
1.0 w
n
157.549011 33.056 m
155.768005 33.056 l
155.844009 33.623001 156.199005 33.995003 156.705002 33.995003 c
157.237015 33.995003 157.56601 33.631001 157.549011 33.056 c
h
158.456009 32.843002 m
158.456009 33.843002 157.939011 34.667 156.739014 34.667 c
155.513 34.667 154.81601 33.716003 154.81601 32.444 c
154.81601 30.936001 155.539001 30.262001 156.849014 30.262001 c
157.364014 30.262001 157.87999 30.354002 158.303009 30.531002 c
158.219009 31.254002 l
157.872009 31.081001 157.423004 30.978001 156.992004 30.978001 c
156.157013 30.978001 155.726013 31.426001 155.751007 32.418003 c
158.429993 32.418003 l
158.447006 32.579998 158.456009 32.724003 158.456009 32.843002 c
f
n
161.618011 30.354002 m
161.618011 31.055002 l
163.876007 34.649002 l
164.012009 34.871002 164.14801 35.066002 164.30101 35.271 c
164.055008 35.262001 163.724014 35.262001 163.138 35.262001 c
161.703003 35.262001 l
161.703003 36.087002 l
165.396011 36.087002 l
165.396011 35.356003 l
163.019012 31.639999 l
162.925003 31.479002 162.832001 31.342001 162.722 31.181002 c
162.874008 31.198002 163.333008 31.198002 164.064011 31.198002 c
165.429993 31.198002 l
165.429993 30.354002 l
161.618011 30.354002 l
f
n
169.672012 35.889999 m
169.672012 36.169998 169.442001 36.400002 169.162003 36.400002 c
168.873001 36.400002 168.644012 36.169998 168.644012 35.889999 c
168.644012 35.601002 168.873001 35.371002 169.162003 35.371002 c
169.442001 35.371002 169.672012 35.601002 169.672012 35.889999 c
h
168.016006 35.889999 m
168.016006 36.169998 167.787003 36.400002 167.498001 36.400002 c
167.208008 36.400002 166.987015 36.169998 166.987015 35.889999 c
166.987015 35.601002 167.208008 35.371002 167.498001 35.371002 c
167.787003 35.371002 168.016006 35.601002 168.016006 35.889999 c
h
170.138 30.345001 m
170.138 34.572002 l
169.23201 34.572002 l
169.23201 32.527 l
169.23201 31.684002 168.764008 31.01 168.126007 31.01 c
167.641006 31.01 167.496002 31.317001 167.496002 31.846001 c
167.496002 34.572002 l
166.593002 34.572002 l
166.593002 31.607002 l
166.593002 30.859001 166.891006 30.26 167.853012 30.26 c
168.568008 30.26 169.07901 30.631001 169.325012 31.172001 c
169.334015 31.164001 l
169.292007 30.926001 169.274002 30.564001 169.274002 30.345001 c
170.138 30.345001 l
f
n
173.905014 33.776001 m
173.064011 33.929001 172.656006 33.342003 172.656006 32.074001 c
172.656006 30.355001 l
171.749008 30.355001 l
171.749008 34.582001 l
172.613007 34.582001 l
172.613007 34.344002 172.588013 33.971001 172.529007 33.648003 c
172.546005 33.648003 l
172.73201 34.217003 173.157013 34.743 173.948013 34.667 c
173.905014 33.776001 l
f
n
175.497009 35.214001 m
175.175003 35.214001 174.912003 35.469002 174.912003 35.784 c
174.912003 36.099003 175.175003 36.354 175.497009 36.354 c
175.809998 36.354 176.073013 36.107002 176.073013 35.784 c
176.073013 35.469002 175.809998 35.214001 175.497009 35.214001 c
h
175.039001 34.584003 0.906006 -4.229 re
f
n
179.082016 30.276001 m
177.994003 30.276001 177.203003 30.811001 177.203003 32.325001 c
177.203003 33.678001 177.892014 34.651001 179.345001 34.651001 c
179.659988 34.651001 179.983002 34.609001 180.263016 34.524002 c
180.169998 33.738003 l
179.915009 33.833 179.626007 33.901001 179.319992 33.901001 c
178.546005 33.901001 178.155014 33.327003 178.155014 32.428001 c
178.155014 31.648001 178.436005 31.057001 179.277008 31.057001 c
179.600006 31.057001 179.949005 31.134001 180.195007 31.263002 c
180.272003 30.488001 l
179.991013 30.378002 179.549011 30.276001 179.082016 30.276001 c
f
n
184.108002 30.355001 m
184.108002 33.082001 l
184.108002 33.610001 183.965012 33.917 183.484009 33.917 c
182.852005 33.917 182.388016 33.243 182.388016 32.391003 c
182.388016 30.355001 l
181.48201 30.355001 l
181.48201 36.557003 l
182.388016 36.557003 l
182.388016 34.649998 l
182.388016 34.389 182.371002 34.035 182.312012 33.806 c
182.32901 33.797001 l
182.574005 34.321003 183.071014 34.667 183.754013 34.667 c
184.713013 34.667 185.012009 34.068001 185.012009 33.32 c
185.012009 30.355001 l
184.108002 30.355001 l
f
n
9.24 18.859999 m
8.825001 18.859999 8.416 18.911001 8.082001 18.996 c
8.134001 19.871 l
8.458 19.751001 8.91 19.657001 9.324 19.657001 c
9.948001 19.657001 10.455001 19.923 10.455001 20.548 c
10.455001 21.763 7.955 21.25 7.955 23.116001 c
7.955 24.107 8.731 24.782001 10.058001 24.782001 c
10.396001 24.782001 10.745001 24.741001 11.095 24.682001 c
11.043 23.869999 l
10.71 23.972002 10.345 24.032001 10.007001 24.032001 c
9.299001 24.032001 8.936001 23.698002 8.936001 23.219002 c
8.936001 22.063002 11.436001 22.491001 11.436001 20.685001 c
11.436001 19.624001 10.6 18.859999 9.24 18.859999 c
f
n
17.269001 18.955002 m
16.266001 18.955002 l
15.535001 21.161001 l
15.441001 21.441002 15.365001 21.729 15.288001 22.052002 c
15.28 22.052002 l
15.195001 21.679001 15.101001 21.348001 14.991001 20.991001 c
14.353001 18.955002 l
13.393001 18.955002 l
12.092001 23.172001 l
13.086 23.172001 l
13.647 21.212002 l
13.758 20.813002 13.877001 20.415001 13.962001 20.033001 c
13.971001 20.033001 l
14.056001 20.449001 14.158001 20.822001 14.268001 21.187 c
14.897 23.172001 l
15.815001 23.172001 l
16.453001 21.221001 l
16.614 20.711 16.699001 20.398001 16.784 20.033001 c
16.793001 20.033001 l
16.878 20.423 16.963001 20.754002 17.09 21.178001 c
17.677 23.172001 l
18.621 23.172001 l
17.269001 18.955002 l
f
n
20.131001 23.815001 m
19.809999 23.815001 19.546001 24.069 19.546001 24.384001 c
19.546001 24.698002 19.809999 24.954 20.131001 24.954 c
20.445002 24.954 20.708 24.707001 20.708 24.384001 c
20.708 24.069 20.445002 23.815001 20.131001 23.815001 c
h
19.674002 23.185001 0.906 -4.229 re
f
n
22.871 18.862001 m
22.556002 18.862001 22.241001 18.896002 21.978001 18.946001 c
22.003 19.714001 l
22.267 19.638 22.599001 19.578001 22.922001 19.578001 c
23.418001 19.578001 23.76 19.791 23.76 20.141001 c
23.76 20.995001 21.901001 20.482 21.901001 21.949999 c
21.901001 22.685001 22.497002 23.265001 23.649002 23.265001 c
23.896002 23.265001 24.185001 23.231001 24.439999 23.189001 c
24.415001 22.445002 l
24.16 22.523001 23.862001 22.565001 23.589001 22.565001 c
23.084002 22.565001 22.836 22.359999 22.836 22.036001 c
22.836 21.216002 24.712002 21.635 24.712002 20.227001 c
24.712002 19.435001 24.007002 18.862001 22.871 18.862001 c
f
n
26.721001 18.862001 m
26.406002 18.862001 26.092001 18.896002 25.828001 18.946001 c
25.854002 19.714001 l
26.117001 19.638 26.449001 19.578001 26.772001 19.578001 c
27.269001 19.578001 27.609999 19.791 27.609999 20.141001 c
27.609999 20.995001 25.752001 20.482 25.752001 21.949999 c
25.752001 22.685001 26.347002 23.265001 27.5 23.265001 c
27.747002 23.265001 28.036001 23.231001 28.289999 23.189001 c
28.265001 22.445002 l
28.01 22.523001 27.712002 22.565001 27.439001 22.565001 c
26.935001 22.565001 26.687002 22.359999 26.687002 22.036001 c
26.687002 21.216002 28.562002 21.635 28.562002 20.227001 c
28.562002 19.435001 27.857002 18.862001 26.721001 18.862001 c
f
n
32.929001 23.907001 m
32.929001 22.219999 l
34.884003 22.219999 l
34.884003 21.469999 l
32.929001 21.469999 l
32.929001 18.955002 l
32.007 18.955002 l
32.007 24.689001 l
34.995003 24.689001 l
34.995003 23.907001 l
32.929001 23.907001 l
f
n
38.442001 21.656 m
36.661003 21.656 l
36.737003 22.223001 37.091003 22.595001 37.598003 22.595001 c
38.129002 22.595001 38.459003 22.231001 38.442001 21.656 c
h
39.348003 21.443001 m
39.348003 22.443001 38.831001 23.267 37.632 23.267 c
36.406002 23.267 35.709003 22.316002 35.709003 21.044001 c
35.709003 19.536001 36.432003 18.862001 37.741001 18.862001 c
38.256001 18.862001 38.772003 18.955002 39.196003 19.131001 c
39.111 19.854 l
38.764 19.681002 38.315002 19.578001 37.885002 19.578001 c
37.049004 19.578001 36.618 20.026001 36.644001 21.018002 c
39.323002 21.018002 l
39.34 21.18 39.348003 21.324001 39.348003 21.443001 c
f
n
43.168003 21.139999 m
43.168003 20.413 42.793003 19.609001 42.119999 19.609001 c
41.540001 19.609001 41.276001 20.088001 41.276001 20.943001 c
41.276001 22.089001 41.771004 22.534 42.495003 22.534 c
42.716003 22.534 42.938004 22.508001 43.168003 22.457001 c
43.168003 21.139999 l
h
44.071003 18.946001 m
44.071003 25.156002 l
43.168003 25.156002 l
43.168003 23.216002 l
42.938004 23.233002 42.733002 23.25 42.529003 23.25 c
41.158001 23.25 40.323002 22.32 40.323002 20.858002 c
40.323002 19.627001 40.837002 18.861 41.873001 18.861 c
42.529003 18.861 43.023003 19.218 43.253002 19.738001 c
43.271004 19.738001 l
43.228001 19.499001 43.211002 19.168001 43.211002 18.946001 c
44.071003 18.946001 l
f
n
48.064003 21.656 m
46.283001 21.656 l
46.358002 22.223001 46.713001 22.595001 47.219997 22.595001 c
47.751003 22.595001 48.081001 22.231001 48.064003 21.656 c
h
48.969997 21.443001 m
48.969997 22.443001 48.454002 23.267 47.253002 23.267 c
46.028004 23.267 45.331001 22.316002 45.331001 21.044001 c
45.331001 19.536001 46.053001 18.862001 47.363003 18.862001 c
47.878002 18.862001 48.394001 18.955002 48.817001 19.131001 c
48.733002 19.854 l
48.386002 19.681002 47.937004 19.578001 47.507004 19.578001 c
46.671001 19.578001 46.239998 20.026001 46.266003 21.018002 c
48.945004 21.018002 l
48.961002 21.18 48.969997 21.324001 48.969997 21.443001 c
f
n
52.444004 22.376001 m
51.603001 22.529001 51.195004 21.942001 51.195004 20.674002 c
51.195004 18.955002 l
50.289001 18.955002 l
50.289001 23.182001 l
51.152004 23.182001 l
51.152004 22.944 51.127003 22.571001 51.068001 22.249001 c
51.084003 22.249001 l
51.271004 22.817001 51.696003 23.343 52.487003 23.267 c
52.444004 22.376001 l
f
n
55.604004 20.775002 m
55.604004 20.172001 55.185001 19.578001 54.559998 19.578001 c
54.201004 19.578001 53.978004 19.782001 53.978004 20.096001 c
53.978004 20.461 54.27 20.859999 55.604004 20.859999 c
55.604004 20.775002 l
h
56.535004 18.947001 m
56.519001 19.305 56.509998 19.739 56.509998 20.105001 c
56.509998 21.83 l
56.509998 22.703001 56.154003 23.265001 54.859001 23.265001 c
54.312004 23.265001 53.783001 23.146002 53.367004 22.984001 c
53.452003 22.207001 l
53.809002 22.429001 54.321003 22.549002 54.714001 22.549002 c
55.381004 22.549002 55.604004 22.275002 55.604004 21.744001 c
55.604004 21.469999 l
54.073002 21.469999 53.104004 20.911001 53.104004 19.943001 c
53.104004 19.271002 53.562004 18.862001 54.287003 18.862001 c
54.962002 18.862001 55.492004 19.237001 55.697002 19.739 c
55.705002 19.731001 l
55.671001 19.501001 55.663002 19.219999 55.663002 18.947001 c
56.535004 18.947001 l
f
n
58.587006 18.955002 m
58.587006 25.156006 l
0.906006 w
S
1.0 w
n
63.227005 18.956009 m
63.227005 24.688004 l
0.921997 w
S
1.0 w
n
67.925003 18.955002 m
67.925003 21.682001 l
67.925003 22.209999 67.782005 22.517 67.301003 22.517 c
66.669006 22.517 66.205002 21.843 66.205002 21.0 c
66.205002 18.955002 l
65.299004 18.955002 l
65.299004 23.183001 l
66.163002 23.183001 l
66.163002 22.963001 66.146004 22.601002 66.104004 22.363001 c
66.112 22.355001 l
66.357002 22.896002 66.863007 23.267 67.571007 23.267 c
68.529999 23.267 68.829002 22.669001 68.829002 21.92 c
68.829002 18.955002 l
67.925003 18.955002 l
f
n
71.129997 18.862001 m
70.816002 18.862001 70.501007 18.896002 70.238007 18.946001 c
70.263 19.714001 l
70.527 19.638 70.858002 19.578001 71.182007 19.578001 c
71.678001 19.578001 72.019997 19.791 72.019997 20.141001 c
72.019997 20.995001 70.161003 20.482 70.161003 21.949999 c
70.161003 22.685001 70.756004 23.265001 71.909004 23.265001 c
72.156006 23.265001 72.445 23.231001 72.700005 23.189001 c
72.674004 22.445002 l
72.419006 22.523001 72.122002 22.565001 71.849007 22.565001 c
71.344002 22.565001 71.096001 22.359999 71.096001 22.036001 c
71.096001 21.216002 72.972 21.635 72.972 20.227001 c
72.972 19.435001 72.267006 18.862001 71.129997 18.862001 c
f
n
75.633003 18.877001 m
74.734001 18.877001 74.463005 19.228001 74.463005 20.173 c
74.463005 22.469999 l
73.656006 22.469999 l
73.656006 23.173 l
74.463005 23.173 l
74.463005 24.519001 l
75.361 24.766001 l
75.361 23.173 l
76.475006 23.173 l
76.475006 22.469999 l
75.369995 22.469999 l
75.369995 20.453001 l
75.369995 19.825001 75.497002 19.656 75.922005 19.656 c
76.109001 19.656 76.313004 19.681002 76.475006 19.724001 c
76.475006 18.972 l
76.229004 18.92 75.914001 18.877001 75.633003 18.877001 c
f
n
78.191002 23.815001 m
77.869995 23.815001 77.606003 24.069 77.606003 24.384001 c
77.606003 24.698002 77.869995 24.954 78.191002 24.954 c
78.505005 24.954 78.768005 24.707001 78.768005 24.384001 c
78.768005 24.069 78.505005 23.815001 78.191002 23.815001 c
h
77.734001 23.185001 0.905998 -4.229 re
f
n
81.583 18.877001 m
80.684006 18.877001 80.413002 19.228001 80.413002 20.173 c
80.413002 22.469999 l
79.605003 22.469999 l
79.605003 23.173 l
80.413002 23.173 l
80.413002 24.519001 l
81.311005 24.766001 l
81.311005 23.173 l
82.424004 23.173 l
82.424004 22.469999 l
81.319 22.469999 l
81.319 20.453001 l
81.319 19.825001 81.447006 19.656 81.872002 19.656 c
82.059006 19.656 82.263 19.681002 82.424004 19.724001 c
82.424004 18.972 l
82.178001 18.92 81.863007 18.877001 81.583 18.877001 c
f
n
86.351006 18.945002 m
86.351006 19.164001 86.368004 19.526001 86.409996 19.764002 c
86.402 19.773001 l
86.155006 19.231001 85.645004 18.859999 84.93 18.859999 c
83.968002 18.859999 83.669006 19.459002 83.669006 20.207001 c
83.669006 23.172001 l
84.573006 23.172001 l
84.573006 20.445002 l
84.573006 19.917002 84.718002 19.609999 85.203003 19.609999 c
85.841003 19.609999 86.309006 20.284 86.309006 21.127001 c
86.309006 23.172001 l
87.215004 23.172001 l
87.215004 18.945002 l
86.351006 18.945002 l
f
n
90.168007 18.877001 m
89.269005 18.877001 88.998001 19.228001 88.998001 20.173 c
88.998001 22.469999 l
88.189995 22.469999 l
88.189995 23.173 l
88.998001 23.173 l
88.998001 24.519001 l
89.896004 24.766001 l
89.896004 23.173 l
91.009003 23.173 l
91.009003 22.469999 l
89.904007 22.469999 l
89.904007 20.453001 l
89.904007 19.825001 90.032005 19.656 90.457001 19.656 c
90.644005 19.656 90.848007 19.681002 91.009003 19.724001 c
91.009003 18.972 l
90.763008 18.92 90.448006 18.877001 90.168007 18.877001 c
f
n
94.659004 21.656 m
92.878006 21.656 l
92.954002 22.223001 93.309006 22.595001 93.815002 22.595001 c
94.347008 22.595001 94.676003 22.231001 94.659004 21.656 c
h
95.565002 21.443001 m
95.565002 22.443001 95.049004 23.267 93.849007 23.267 c
92.623001 23.267 91.926003 22.316002 91.926003 21.044001 c
91.926003 19.536001 92.648003 18.862001 93.959007 18.862001 c
94.474007 18.862001 94.989006 18.955002 95.413002 19.131001 c
95.328003 19.854 l
94.981003 19.681002 94.533005 19.578001 94.102005 19.578001 c
93.266006 19.578001 92.835007 20.026001 92.861008 21.018002 c
95.540001 21.018002 l
95.557007 21.18 95.565002 21.324001 95.565002 21.443001 c
f
n
101.745003 21.092001 m
101.745003 20.105001 101.252007 19.642 100.665009 19.642 c
99.961006 19.642 99.587006 20.148001 99.587006 21.109001 c
99.587006 22.087002 100.122002 22.517 100.674004 22.517 c
101.396004 22.517 101.745003 22.001001 101.745003 21.092001 c
h
102.68 21.152 m
102.68 22.65 101.879997 23.267 100.751007 23.267 c
99.469002 23.267 98.649002 22.302002 98.649002 21.015001 c
98.649002 19.514002 99.409996 18.859999 100.581001 18.859999 c
101.829994 18.859999 102.68 19.839001 102.68 21.152 c
f
n
106.449005 24.399002 m
106.262009 24.459002 106.058006 24.485001 105.871002 24.485001 c
105.327003 24.485001 105.079994 24.185001 105.079994 23.516001 c
105.079994 23.173 l
106.177002 23.173 l
106.177002 22.469999 l
105.079994 22.469999 l
105.079994 18.955002 l
104.177002 18.955002 l
104.177002 22.469999 l
103.369003 22.469999 l
103.369003 23.173 l
104.177002 23.173 l
104.177002 23.499001 l
104.177002 24.663002 104.729996 25.219999 105.828003 25.219999 c
106.066002 25.219999 106.295006 25.194 106.517006 25.144001 c
106.449005 24.399002 l
f
n
111.022003 23.907001 m
111.022003 18.955002 l
110.101006 18.955002 l
110.101006 23.907001 l
108.528008 23.907001 l
108.528008 24.689001 l
112.604004 24.689001 l
112.604004 23.907001 l
111.022003 23.907001 l
f
n
116.234009 21.018002 m
113.555008 21.018002 l
113.529007 20.026001 113.959999 19.578001 114.796005 19.578001 c
115.226006 19.578001 115.675003 19.681002 116.022003 19.854 c
116.106003 19.131001 l
115.683006 18.955002 115.167007 18.862001 114.652008 18.862001 c
113.342003 18.862001 112.619995 19.536001 112.619995 21.044001 c
112.619995 22.316002 113.317009 23.267 114.543007 23.267 c
115.742004 23.267 116.259003 22.443001 116.259003 21.443001 c
116.259003 21.324001 116.251007 21.18 116.234009 21.018002 c
h
114.509003 22.595001 m
114.002007 22.595001 113.647003 22.223001 113.572006 21.656 c
115.353004 21.656 l
115.369995 22.231001 115.040001 22.595001 114.509003 22.595001 c
f
n
119.113007 18.876001 m
118.025009 18.876001 117.234009 19.411001 117.234009 20.925001 c
117.234009 22.278002 117.923004 23.251001 119.377007 23.251001 c
119.691002 23.251001 120.014008 23.209002 120.294006 23.125002 c
120.201004 22.338001 l
119.946007 22.433001 119.657005 22.501001 119.351006 22.501001 c
118.578003 22.501001 118.187004 21.927002 118.187004 21.028002 c
118.187004 20.249001 118.467003 19.657001 119.309006 19.657001 c
119.631004 19.657001 119.979996 19.734001 120.227005 19.863001 c
120.303009 19.088001 l
120.022003 18.978001 119.581009 18.876001 119.113007 18.876001 c
f
n
124.139999 18.955002 m
124.139999 21.682001 l
124.139999 22.209999 123.996002 22.517 123.516006 22.517 c
122.883003 22.517 122.419006 21.843 122.419006 20.991001 c
122.419006 18.955002 l
121.513008 18.955002 l
121.513008 25.156002 l
122.419006 25.156002 l
122.419006 23.25 l
122.419006 22.989 122.402008 22.635 122.343002 22.406 c
122.360001 22.398001 l
122.605003 22.921001 123.103004 23.267 123.785004 23.267 c
124.745003 23.267 125.043007 22.669001 125.043007 21.92 c
125.043007 18.955002 l
124.139999 18.955002 l
f
n
129.282013 18.955002 m
129.282013 21.682001 l
129.282013 22.209999 129.139008 22.517 128.658005 22.517 c
128.025009 22.517 127.562004 21.843 127.562004 21.0 c
127.562004 18.955002 l
126.656006 18.955002 l
126.656006 23.183001 l
127.519997 23.183001 l
127.519997 22.963001 127.502007 22.601002 127.459999 22.363001 c
127.469009 22.355001 l
127.713005 22.896002 128.220001 23.267 128.928009 23.267 c
129.887009 23.267 130.186005 22.669001 130.186005 21.92 c
130.186005 18.955002 l
129.282013 18.955002 l
f
n
134.534012 21.092001 m
134.534012 20.105001 134.041 19.642 133.455002 19.642 c
132.75 19.642 132.376007 20.148001 132.376007 21.109001 c
132.376007 22.087002 132.911011 22.517 133.463013 22.517 c
134.186005 22.517 134.534012 22.001001 134.534012 21.092001 c
h
135.469009 21.152 m
135.469009 22.65 134.669998 23.267 133.539993 23.267 c
132.258011 23.267 131.439011 22.302002 131.439011 21.015001 c
131.439011 19.514002 132.199005 18.859999 133.369995 18.859999 c
134.619003 18.859999 135.469009 19.839001 135.469009 21.152 c
f
n
137.189011 18.955002 m
137.189011 25.156006 l
0.906006 w
S
1.0 w
n
141.979996 21.092001 m
141.979996 20.105001 141.487 19.642 140.901001 19.642 c
140.195999 19.642 139.822006 20.148001 139.822006 21.109001 c
139.822006 22.087002 140.35701 22.517 140.909012 22.517 c
141.631012 22.517 141.979996 22.001001 141.979996 21.092001 c
h
142.915009 21.152 m
142.915009 22.65 142.116013 23.267 140.986008 23.267 c
139.70401 23.267 138.884003 22.302002 138.884003 21.015001 c
138.884003 19.514002 139.645004 18.859999 140.81601 18.859999 c
142.064011 18.859999 142.915009 19.839001 142.915009 21.152 c
f
n
146.729004 21.692001 m
146.729004 21.142 146.356003 20.828001 145.78801 20.828001 c
145.178009 20.828001 144.838013 21.15 144.838013 21.701 c
144.838013 22.218 145.195007 22.583 145.796005 22.583 c
146.382004 22.583 146.729004 22.252001 146.729004 21.692001 c
h
147.902008 18.389999 m
147.902008 19.18 147.383011 19.609999 146.466003 19.609999 c
145.746002 19.609999 l
145.237 19.609999 145.050003 19.697001 145.050003 19.913 c
145.050003 20.034 145.127014 20.164001 145.296005 20.232 c
145.423004 20.207001 145.619003 20.189999 145.779999 20.189999 c
146.96701 20.189999 147.604004 20.836 147.604004 21.752001 c
147.604004 22.057001 147.494003 22.312 147.315002 22.456001 c
147.961014 22.456001 l
147.961014 23.171001 l
146.534012 23.171001 l
146.305008 23.223001 146.093002 23.256001 145.839005 23.256001 c
144.63501 23.256001 143.957001 22.507002 143.957001 21.616001 c
143.957001 21.091002 144.169006 20.658001 144.585007 20.428001 c
144.28801 20.301001 144.101013 20.008001 144.101013 19.697001 c
144.101013 19.417002 144.262009 19.197001 144.517014 19.07 c
144.152008 18.884001 143.838013 18.484001 143.838013 18.007 c
143.838013 17.190001 144.525009 16.767 145.627014 16.767 c
146.984009 16.767 147.902008 17.487001 147.902008 18.389999 c
h
147.001007 18.271002 m
147.001007 17.811001 146.559998 17.469999 145.771011 17.469999 c
145.161011 17.469999 144.737 17.726002 144.737 18.177 c
144.737 18.467001 144.915009 18.723001 145.203003 18.884001 c
145.271011 18.876001 145.355011 18.876001 145.432007 18.876001 c
146.221008 18.876001 l
146.755005 18.876001 147.001007 18.637001 147.001007 18.271002 c
f
n
150.958008 18.527 m
150.464005 17.213001 150.048004 16.814001 149.095001 16.814001 c
148.925003 16.814001 148.695007 16.838001 148.525009 16.872002 c
148.593002 17.657001 l
148.779999 17.589001 148.949997 17.564001 149.146011 17.564001 c
149.571014 17.564001 149.809998 17.76 150.073013 18.484001 c
150.243011 18.936001 l
148.661011 23.172001 l
149.682007 23.172001 l
150.371002 21.237001 l
150.507004 20.862001 150.609009 20.487001 150.703003 20.129002 c
150.711014 20.129002 l
150.796005 20.469999 150.975006 21.016001 151.128006 21.451 c
151.731003 23.172001 l
152.709991 23.172001 l
150.958008 18.527 l
f
n
155.554001 18.954 m
155.554001 19.654001 l
157.813004 23.25 l
157.949005 23.471001 158.085007 23.666 158.237015 23.871 c
157.991013 23.862001 157.660004 23.862001 157.074005 23.862001 c
155.639008 23.862001 l
155.639008 24.687 l
159.333008 24.687 l
159.333008 23.956001 l
156.955002 20.24 l
156.862015 20.079 156.769012 19.942001 156.658005 19.781 c
156.811005 19.798 157.269989 19.798 157.999008 19.798 c
159.367004 19.798 l
159.367004 18.954 l
155.554001 18.954 l
f
n
163.211014 18.945002 m
163.211014 19.164001 163.227005 19.526001 163.269989 19.764002 c
163.262009 19.773001 l
163.015015 19.231001 162.505005 18.859999 161.789993 18.859999 c
160.828003 18.859999 160.529007 19.459002 160.529007 20.207001 c
160.529007 23.172001 l
161.433014 23.172001 l
161.433014 20.445002 l
161.433014 19.917002 161.577011 19.609999 162.062012 19.609999 c
162.699997 19.609999 163.169006 20.284 163.169006 21.127001 c
163.169006 23.172001 l
164.075012 23.172001 l
164.075012 18.945002 l
163.211014 18.945002 l
f
n
167.84201 22.376001 m
167.0 22.529001 166.59201 21.942001 166.59201 20.674002 c
166.59201 18.955002 l
165.686005 18.955002 l
165.686005 23.182001 l
166.550003 23.182001 l
166.550003 22.944 166.524002 22.571001 166.465012 22.249001 c
166.48201 22.249001 l
166.669006 22.817001 167.094009 23.343 167.884003 23.267 c
167.84201 22.376001 l
f
n
170.009003 24.384001 m
170.009003 24.707001 169.746002 24.954 169.433014 24.954 c
169.111008 24.954 168.848007 24.698002 168.848007 24.384001 c
168.848007 24.069 169.111008 23.815001 169.433014 23.815001 c
169.746002 23.815001 170.009003 24.069 170.009003 24.384001 c
h
168.976013 18.955002 0.906006 4.229 re
f
n
173.018005 18.876001 m
171.929993 18.876001 171.139999 19.411001 171.139999 20.925001 c
171.139999 22.278002 171.828003 23.251001 173.282013 23.251001 c
173.596008 23.251001 173.919006 23.209002 174.199997 23.125002 c
174.106003 22.338001 l
173.851013 22.433001 173.562012 22.501001 173.256012 22.501001 c
172.48201 22.501001 172.09201 21.927002 172.09201 21.028002 c
172.09201 20.249001 172.372009 19.657001 173.213013 19.657001 c
173.537003 19.657001 173.88501 19.734001 174.132004 19.863001 c
174.208008 19.088001 l
173.928009 18.978001 173.485016 18.876001 173.018005 18.876001 c
f
n
178.045013 18.955002 m
178.045013 21.682001 l
178.045013 22.209999 177.901001 22.517 177.421005 22.517 c
176.78801 22.517 176.325012 21.843 176.325012 20.991001 c
176.325012 18.955002 l
175.418015 18.955002 l
175.418015 25.156002 l
176.325012 25.156002 l
176.325012 23.25 l
176.325012 22.989 176.308014 22.635 176.248001 22.406 c
176.265015 22.398001 l
176.509995 22.921001 177.007004 23.267 177.690002 23.267 c
178.649994 23.267 178.948013 22.669001 178.948013 21.92 c
178.948013 18.955002 l
178.045013 18.955002 l
f
n
[/EMC PDFMark5
PDFVars/TermAll get exec end end
%%PageTrailer
%%Trailer
%%EOF
